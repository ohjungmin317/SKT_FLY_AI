# -*- coding: utf-8 -*-
"""Week1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zS0Vq6J8WNF33EBUDzovNPZb-Z931Wkt

# week1 day1 2023 06 26
"""

! pip install numpy

import numpy as np

arr = np.array([1,2,3,4]) # 배열을 중괄호로 연결을 해준다

print(arr)

print(type(arr)) # 데이터 type이 뭔지 알려주는 함수

np.eye(3)

np.tri(3)

np.empty(10) # 쓰레기 값이 항상 있다.

np.random.random((3,3))

np.random.randint(0, 10, (3,3))

np.random.normal(0,1,(3,3))

np.random.rand(3,3)

np.random.randn(3,3)

np.ones((3,3),dtype=bool)

arr = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]],
 [[9, 10, 11, 12], [13, 14, 15, 16]],
 [[17, 18, 19, 20], [21, 22, 23, 24]]])

print(arr.shape)

x = np.array([1, 2, 3, 4, 5])
y = np.array([[1, 2, 3, 4, 5]])
z = np.array([[1], [2], [3], [4], [5]])

print(x.shape, y.shape, z.shape)

np.datetime64('2021-12-21')

np.arange('2005-05','2006-05', dtype='datetime64[M]') # 타입만 지정을 해주면 원하는 시간을 출력해줄 수 있다.

import matplotlib

! pip install matplotlib

import matplotlib
import matplotlib.pyplot as plt
print(matplotlib.__version__)

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt # 맷플롯립 import 하기
plt.rcParams['font.family'] = 'NanumBarunGothic' # 나눔바른고딕 적용하기

import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0, 10)**2
plt.plot(x)
plt.show()

x = np.arange(10, 20, 0.1)
y = x**2
plt.plot(x, y)
plt.show()

x = np.arange(0, 10)
y = x**2
plt.plot(x, y)
plt.title('플롯 그래프')
plt.xlabel('X축')
plt.ylabel('Y축')
plt.show()

plt.rcParams['font.family'] = 'NanumBarunGothic'

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

plt.rc('font',family='NanumBarunGothic')

x = np.arange(0, 10)
y = x**2
plt.plot(x, y)
plt.title('플롯 그래프')
plt.xlabel('X축')
plt.ylabel('Y축')
plt.show()

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt

plt.rc('font', family='NanumBarunGothic')

import numpy as np
x = np.arange(0, 10)
y = x**2
plt.plot(x, y)
plt.title('플롯 그래프')
plt.xlabel('X축')
plt.ylabel('Y축')
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.sin(x + 0.5)
y3 = np.sin(x + 1)
plt.plot(x, y1, 'r--')
plt.plot(x, y2, 'b.')
plt.plot(x, y3, 'g-.')
plt.show()

x = np.arange(10)
plt.plot(x, x, 'r.--')
plt.plot(x, x+2, 'bo-')
plt.plot(x, x+4, 'gv-.')
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.sin(x + 0.5)
y3 = np.sin(x + 1)
plt.plot(x, y1, 'r--',label = 'Sin A')
plt.plot(x, y2, 'b.',label = 'Sin B')
plt.plot(x, y3, 'g-.',label = 'Sin C')
plt.legend()
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.sin(x + 0.5)
y3 = np.sin(x + 1)
plt.plot(x, y1, 'r--',label = 'Sin A')
plt.plot(x, y2, 'b.',label = 'Sin B')
plt.plot(x, y3, 'g-.',label = 'Sin C')
plt.legend(loc = 'upper right') # 범주의 위치를 지정할 수 있다.
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
plt.plot(x, y1, 'r--',label = 'Sin A')
plt.xlim([2,20])
plt.ylim([-1, 0.8])
plt.show()

x = np.linspace(0, 10, 100)
y = np.sin(x)
plt.plot(x, y, 'b-.', linewidth=3)
plt.xticks(np.arange(0, 10, 2))
plt.yticks(np.arange(-1.0, 1.1))
plt.show()

x = np.linspace(0, 10, 100)
y = np.sin(x)
plt.plot(x, y, linewidth=3)
plt.xticks([0, 5, 10], labels=['Jan', 'Feb', 'Mar'])
plt.yticks([-1, 0, 1], labels=['최소', '평균', '최대'])
plt.show()

x = np.random.rand(30)
y = np.random.rand(30)
plt.scatter(x,y)
plt.show()

n = 50
x = np.random.rand(n)
y = np.random.rand(n)

area = (30 * np.random.rand(n))**2
colors = np.random.rand(n)
plt.scatter(x, y ,s = area , c = colors, alpha = 0.7)
plt.show()

x = ['A' , 'B' , 'C' , 'D']
y = [5. , 25. , 50. , 20.]
plt.barh(x,y) # bar vertical은 default 값 horizion이 설정해주는는 것
plt.show()

name = ['A','B','C','D']
y = [5. , 25. , 50. , 20.]
z = [8. , 20. , 25. , 6.]
fig, ax = plt.subplots(1, 2)
fig.set_size_inches(12, 5)
ax[0].bar(name, y, color='#33aaff') # 그래프를 한가지 색으로 나타내는 것
ax[1].bar(name, z, color=['r', 'g', 'b', 'k']) # 그래프를 각각 r g b k로 나타낸 것
plt.show()

x = np.random.normal(172, 10, 250) # 히스토그램
plt.hist(x, bins=20, color='#05ae1c')
plt.show()

# boxplot 나타내는 것
x = np.random.normal(10, 3, 100)
y = np.random.normal(13, 3, 100)
z = np.random.normal(8, 5, 100)
plt.boxplot([x, y, z])
plt.xticks([1, 2, 3], ['A', 'B', 'C'])
plt.show()

x = np.random.normal(10, 3, 100)
y = np.random.normal(13, 3, 100)
z = np.random.normal(8, 5, 100)
plt.boxplot([x, y, z], patch_artist=True, sym='ro')
plt.xticks([1, 2, 3], ['A', 'B', 'C'])
plt.show()

import matplotlib.pyplot as plt
import matplotlib.image as img
image = img.imread('MyImage.jpg')
plt.imshow(image)
plt.xticks([])
plt.yticks([])
plt.show()

! pip install pandas

import pandas as pd

ser = pd.Series([1,2,3], index = ['a','b','c'])
ser

ser.loc['a']

ser.loc['b':'c']

ser.iloc[1]

ser.iloc[1:3]

ser.loc[[True, False, True]]

ser != 2 # False 인 값

ser.loc[ser !=2]

data = [[1, 10 ,100], [2, 20, 200], [3, 30, 300]]
df = pd.DataFrame(data, index = ['r1','r2','r3'], columns = ['c1','c2','c3'])

df

df.loc['r1','c2']

df.loc['r2', :]

df.loc[:,'c2']

df['c2'] > 10

df.loc[(df['c1']>1)] # 산술연산 논리연산을 사용해서 추출도 가능하다.

df.loc[(df['c1']>1) & (df['c3'] < 300)]

x = [['Jackson', 68, True, 1.5, 'A'],
 ['Liam', 74, True, 1.1, 'A'],
 ['Emma', 20, False, 0.89, 'C']]
df = pd.DataFrame(x, columns=['Name', 'Weight', "Option", 'Etc', 'Type'])

df

df = pd.DataFrame(data)

print('type : ', type(df))
print('shape : ', df.shape)
print(df)

data = {
'Name':['Jackson', 'Emma', 'Noah', 'James'],
'Wight':[68, 74, 77, 78],
'Option':[True, True, False, False],
'Rate':[0.21, 1.1, 0.89, 0.91],
'Type':['A','A','C','C']
}
df = pd.DataFrame(data)

print('type : ', type(df))
print('shape : ', df.shape)
print(df)

import pandas as pd

cv = pd.read_csv('./penguins.csv')

print('shape: ',cv.shape)
print('dtypes :',cv.dtypes)

cv.info()

cv.info

cv.head()

cv.tail()

import pandas as pd
import matplotlib.pyplot as plt

csv = './animation.csv'
df = pd.read_csv(csv, index_col=0, parse_dates=['Date'])
df.head()

df.tail()

import pandas as pd

df = pd.read_csv('./titanic.csv')

import seaborn as sns

sns.boxplot(data=df)
plt.show()

"""# week1 day2 2023 06 27

"""

df = pd.read_csv('./crop_yield.csv')

df.head()

sns.boxplot(data=df)
plt.show()

print(df.describe())
print(df['Water'].describe())

import matplotlib.pyplot as plt
import seaborn as sns
sns.histplot(x='Water', data=df)
plt.show()

df.head()

import matplotlib.pyplot as plt
import seaborn as sns
sns.histplot(x='Yield', data=df)
plt.show()

df = pd.read_csv('./blood_pressure.csv')

df.head()

import matplotlib.pyplot as plt
import seaborn as sns
sns.histplot(x='agegrp', data=df)
plt.show()

sns.violinplot(y = df['sex'], x = df['bp_before'])

sns.violinplot(x = df['bp_after'], y = df['bp_before'])

import matplotlib.pyplot as plt
import seaborn as sns
sns.histplot(x='bp_after', data=df)
plt.show()



import pandas as pd
import matplotlib.pyplot as plt

! pip install bs4

import requests
from bs4 import BeautifulSoup

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

! pip install requests

import requests
from bs4 import BeautifulSoup as bs

res = requests.get('https://dhlottery.co.kr/common.do?method=main') #URL을 res 변수에 넣어준다.
soup = bs(res.content, 'html.parser')
result = soup.select('.ball_645')

data = []
for num in result:
  data.append(int(num.text))

data

df = pd.Series(data)
df

df.dtypes

plt.rc('font', family='NanumBarunGothic')

plt.bar(['1번','2번','3번','4번','5번','6번','보너스'], data)

plt.stem(['1번','2번','3번','4번','5번','6번','보너스'], data)

!pip install newspaper3k

import newspaper as news

link = 'https://n.news.naver.com/mnews/article/021/0002579360?sid=102'

article=news.Article(link, language='ko')

article.download()

article.parse()

print(article.text)

import requests
from bs4 import BeautifulSoup as bs

import os

import os
import requests
from bs4 import BeautifulSoup

#url = "https://comic.naver.com/webtoon/detail.nhn?titleId=747961&no=2"
#url='https://comic.naver.com/webtoon/detail?titleId=648419&no=390'
url='https://comic.naver.com/webtoon/detail?titleId=790713&no=137'
html = requests.get(url).text
soup = BeautifulSoup(html, 'html.parser')

if not(os.path.isdir("./webtoon")):
    os.makedirs(os.path.join("./webtoon"))

i = 1
for tag in soup.select('.wt_viewer img'):
    img_url = tag['src']
    save_img = "./webtoon/" + str(i).zfill(3) + img_url[-4:]
    i += 1
    print(save_img + " : OK")
    headers = {'Referer': img_url}
    img_data = requests.get(img_url, headers=headers).content

    with open(save_img, 'wb') as f:
        f.write(img_data)

# Seaborn

import seaborn as sns
print(sns.__version__)

import pandas as pd
csv = pd.read_csv('./tips.csv')
csv.head(10)

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.countplot(data=csv, x='day')
plt.show()

df = csv.select_dtypes(['number']) # 숫자만 있는 tuple만 가지고 오는 것
df.head()

x = df.corr() # 상관 관계를 보기 위한 함수
x

sns.heatmap(x, annot=True, cmap='viridis')
plt.show()

import pandas as pd
csv = pd.read_csv('./titanic.csv')
csv.head(10)

df = csv.select_dtypes(['number']) # 숫자만 있는 tuple만 가지고 오는 것
df.head()

sns.heatmap(x, annot=True, cmap='viridis')
plt.show()

x = df.corr() # 상관 관계를 보기 위한 함수
x

sns.heatmap(x, annot = True, cmap = 'viridis')
plt.show()

csv = pd.read_csv('./iris.csv')

csv.head(10)

x = df.corr() # 상관 관계를 보기 위한 함수
x

sns.heatmap(x, annot = True, cmap = 'viridis')
plt.show()

csv = pd.read_csv('./penguins.csv')

csv.head()

csv.groupby('species')

sns.set_style('white')
sns.pairplot(csv,hue='species')
plt.show()

csv = pd.read_csv('./titanic.csv')

csv.info()

#지도 차트

! pip install folium

import folium
seoul_map = folium.Map(location=[37.4921263, 126.9261711], zoom_start=12, tiles='Stamen Toner')
#seoul_map.save('./seoul.html')
seoul_map

df = pd.read_excel('./서울지역대학교위치.xlsx')

seoul_map = folium.Map(location=[37.4921263, 126.9261711], tiles='Stamen Terrain', zoom_state=12)
for name, lat, lng in zip(df.index, df.위도, df.경도):
  folium.CircleMarker([lat, lng],
                      radius=10,
                      color='brown',
                      fill=True,
                      fill_color='coral',
                      fill_opacity=0.7,
                      popup=name).add_to(seoul_map)
seoul_map

!sudo apt-get install -y fonts-nanum
 !sudo fc-cache -fv
 !rm ~/.cache/matplotlib -rf

data = pd.read_csv('./논산_mod.csv')

df.head()

df.info()

df.tail()

import seaborn as sns

df

df = df.select_dtypes(['float'])

df.head()

x = df.corr()

x

sns.heatmap(x, annot=True, cmap='viridis')
plt.show()

df = pd.read_excel('./서울시공중화장실위치정보생활보건과.xls')

df

df.rename(columns={'좌표[X]\n(조건부 선택 입력)':'X'},inplace=True)
df.rename(columns={'좌표[Y]\n(조건부 선택 입력)':'Y'},inplace=True)

df.info()

seoul_map = folium.Map(location=[37.4921263, 126.9261711], tiles='Stamen Terrain', zoom_state=12)
for name, lat, lng in zip(df.index, df.Y, df.X):
  folium.CircleMarker([lat, lng],
                      radius=10,
                      color='brown',
                      fill=True,
                      fill_color='coral',
                      fill_opacity=0.7,
                      popup=name).add_to(seoul_map)
seoul_map

"""# week1 day2 2023 06 27 -2"""



! pip install pandas
! pip install matplotlib

! pip install numpy

! pip install scikit-learn

import pandas as pd
import numpy as np
from sklearn import datasets
iris = datasets.load_iris()

df = pd.DataFrame(iris['data'], columns=iris['feature_names'])
df['Target'] = iris['target']
df.head()

df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'Target']

df.isnull().sum()

df.duplicated().sum()

df.loc[df.duplicated(), :]

df.loc[(df.sepal_length==5.8) & (df.petal_width==1.9), :]

df = df.drop_duplicates()

df.loc[(df.sepal_length==5.8) & (df.petal_width==1.9), :]

from sklearn.model_selection import train_test_split
X_data = df.loc[:, 'sepal_length':'petal_width']
y_data = df.loc[:, 'Target']
X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2,
                                                    shuffle=True, random_state=20)
# shuffle - 문제를 섞어서 나오는게 하는 것

X_data

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, y_train)

y_knn_pred = knn.predict(X_test)

from sklearn.metrics import accuracy_score
knn_acc = accuracy_score(y_test, y_knn_pred)
print("정확도 : ", knn_acc)

from sklearn.svm import SVC
svc = SVC(kernel='rbf')
svc.fit(X_train, y_train)

y_svc_pred = svc.predict(X_test)
svc_acc = accuracy_score(y_test, y_svc_pred)
print("정확도 : ", svc_acc)

from sklearn.linear_model import LogisticRegression
lrc = LogisticRegression()
lrc.fit(X_train, y_train)

y_lrc_pred = lrc.predict(X_test)
lrc_acc = accuracy_score(y_test, y_lrc_pred)
print("평균값 : ", lrc_acc)

y_lrc_pred = lrc.predict(X_test)
lrc_acc = accuracy_score(y_test, y_lrc_pred)
print("평균값 : ", lrc_acc)

from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier(max_depth=3, random_state=20)
dtc.fit(X_train, y_train)

y_dtc_pred = dtc.predict(X_test)
dtc_acc = accuracy_score(y_test, y_dtc_pred)
print("평균값 : ", dtc_acc)

from sklearn.preprocessing import LabelEncoder
items = ["tv", "냉장고", "컴퓨터", "전자레인지", "믹서", "선풍기","믹서"]
encoder = LabelEncoder()
encoder.fit(items)
labels = encoder.transform(items)
print(labels)
print(encoder.classes_)
print(encoder.inverse_transform)

items = df = pd.DataFrame({'items': items})
print(df)
print(pd.get_dummies(df))

from sklearn import svm, datasets
cancer = datasets.load_breast_cancer()
cancer.keys()

import pandas as pd
dfX = pd.DataFrame(cancer.data, columns=cancer.feature_names)
dfy = pd.DataFrame(cancer.target, columns=['target'])
print('features ;', dfX.shape)
print('lable : ', dfy.shape)

dfX.head()

dfy.head()

dfX.info()

dfX.isnull().sum()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(dfX, dfy, test_size=0.2, random_state=42)
print(X_train.shape, X_test.shape)
print(y_train.shape, y_test.shape)

# 데이터 스케일링
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
y_train = y_train.values
X_train[:3, :]

X_test = sc.transform(X_test)
y_test = y_test.values

y_train = y_train.flatten()

from sklearn.svm import SVC
svc = SVC(kernel='linear')
svc.fit(X_train, y_train)

y_test = y_test.flatten()
y_pred = svc.predict(X_test)
y_pred

import matplotlib.pyplot as plt
import seaborn as sns
from  sklearn.metrics import confusion_matrix
cf = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,6))
s = sns.heatmap(cf, annot=True, fmt='d', cmap='Blues', cbar=False)
s.set(xlabel='Prediction', ylabel='Actual')
plt.show()

from sklearn.metrics import *
print("정확도 : ", accuracy_score(y_test, y_pred))

#펭귄

import numpy as np
import pandas as pd
import seaborn as sns

df=sns.load_dataset('penguins')
df.head()

print(df.shape)

df.info()

df['species'].value_counts()

df['island'].value_counts()

df.isnull().sum(axis=0)

df = df.dropna()
df.isnull().sum(axis=0)

print(df.shape)

df['species'] = df['species'].map({'Adelie':0, 'Chinstrap':1, 'Gentoo':2})
df['island'] = df['island'].map({'Biscoe':0, 'Dream':1, 'Torgersen':2})
df['sex'] = df['sex'].map({'Female':0, 'Male':1})
df.head()

import matplotlib.pyplot as plt
sns.set_style('darkgrid')
sns.scatterplot(x='bill_length_mm', y='bill_depth_mm', data=df, hue='species')
plt.show()

X = df.drop(['species'], axis=1)
y = df['species']
X.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape, X_test.shape)
print(y_train.shape, y_test.shape)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X_train = sc.fit_transform(X_train)

y_train = y_train.values
X_train[:3, :]

X_test = sc.transform(X_test)
y_test = y_test.values

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)
print(y_pred)

(y_test == y_pred).sum()

from sklearn.metrics import confusion_matrix

cf = confusion_matrix(y_test, y_pred)
print(cf)

s = sns.heatmap(cf, annot=True, cmap='Blues')
s.set(xlabel='Prediction', ylabel='Actual')
plt.show()

from sklearn.metrics import *

from sklearn.metrics import *

acc = accuracy_score(y_test, y_pred)
print("정확도 : ", acc)

pre = precision_score(y_test, y_pred, average='macro')
print("재현율 : ", pre)

recall = recall_score(y_test, y_pred, average='macro')
print("정밀도 : ", recall)

from sklearn.svm import SVC
svc = SVC(kernel='linear')
svc.fit(X_train, y_train)

s = sns.heatmap(cf, annot=True, cmap='Blues')
s.set(xlabel='Prediction', ylabel='Actual')
plt.show()

from sklearn.metrics import *

acc = accuracy_score(y_test, y_pred)
print("정확도 : ", acc)

pre = precision_score(y_test, y_pred, average='macro')
print("재현율 : ", pre)

recall = recall_score(y_test, y_pred, average='macro')
print("정밀도 : ", recall)

from sklearn.svm import SVC
svc = SVC(kernel='linear')
svc.fit(X_train, y_train)
y_test = y_test.flatten()
y_pred = svc.predict(X_test)
y_pred

from sklearn.metrics import *

acc = accuracy_score(y_test, y_pred)
print("정확도 : ", acc)

pre = precision_score(y_test, y_pred, average='macro')
print("재현율 : ", pre)

recall = recall_score(y_test, y_pred, average='macro')
print("정밀도 : ", recall)

import pandas as pd
from sklearn import datasets

iris = datasets.load_iris()
dfX = pd.DataFrame(iris.data, columns=iris.feature_names)
dfy = pd.DataFrame(iris.target, columns=['target'])

dfX.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(dfX, dfy, test_size=0.2, random_state=42)

X_train = X_train.values
X_test = X_test.values

y_train = y_train.values.flatten()
y_test = y_test.values.flatten()

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree
from sklearn.tree import DecisionTreeClassifier

dtc = DecisionTreeClassifier()
dtc.fit(X_train,y_train)

plt.figure(figsize=(10,10))
plot_tree(dtc)
plt.show()

y_pred = dtc.predict(X_test)
y_pred

from sklearn.metrics import *
acc = accuracy_score(y_test, y_pred)
print("정확도 : ", acc)

dtc = DecisionTreeClassifier(max_depth=3)
dtc.fit(X_train, y_train)
plt.figure(figsize=(10,10))
plot_tree(dtc)
plt.show()

y_pred = dtc.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("정확도 : ", acc)

import pandas as pd
from sklearn.ensemble import VotingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df=sns.load_dataset('penguins')
df.head()

df = sns.load_dataset('penguins')

lr_clf = LogisticRegression(solver="liblinear")
knn_clf = KNeighborsClassifier(n_neighbors=8)
vo_clf = VotingClassifier(estimators=[("LR", lr_clf), ("KNN", knn_clf)], voting="soft")

df.info()

X_train, X_test, y_train, y_test = train_test_split(df.bill_length_mm, df.species, test_size=0.2, random_state=999)

classifiers = [vo_clf, lr_clf, knn_clf]
for classifier in classifiers:
    classifier.fit(X_train, y_train)
    pred = classifier.predict(X_test)
    name = classifier.__class__.__name__
    print(f"{name} 정확도 : {accuracy_score(y_test, pred)}")

# 라이브러리

from sklearn.datasets import load_breast_cancer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.model_selection import GridSearchCV

# 모델 생성

df = sns.load_dataset('penguins')
np.random.seed(9)
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, stratify=cancer.target)

params = {'n_estimators': [100], 'max_depth': [6, 8, 10, 12], 'min_samples_leaf': [8, 12, 18],
          'min_samples_split': [8, 16, 20]}

clf = RandomForestClassifier(n_estimators=100)
grid_clf = GridSearchCV(clf, param_grid=params, cv=2, n_jobs=-1)  # -1 은 cpu를 다 쓴다는 의미
grid_clf.fit(X_train, y_train)

print(f"최적의 파라미터\n{grid_clf.best_params_}")
print(f"최고 예측 정확도: {grid_clf.best_score_}")

